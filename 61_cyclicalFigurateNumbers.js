// Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) numbers and are generated by the following formulae:

// Triangle    P3,n=n(n+1)/2   1, 3, 6, 10, 15, ...
// Square    P4,n=n2   1, 4, 9, 16, 25, ...
// Pentagonal    P5,n=n(3n−1)/2    1, 5, 12, 22, 35, ...
// Hexagonal   P6,n=n(2n−1)    1, 6, 15, 28, 45, ...
// Heptagonal    P7,n=n(5n−3)/2    1, 7, 18, 34, 55, ...
// Octagonal   P8,n=n(3n−2)    1, 8, 21, 40, 65, ...
// The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.

// The set is cyclic, in that the last two digits of each number is the first two digits of the next number (including the last number with the first).
// Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and pentagonal (P5,44=2882), is represented by a different number in the set.
// This is the only set of 4-digit numbers with this property.
// Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type: triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number in the set.


// Algorithm candidate 1:
// loop through Triangle numbers up to less than 5 digits
// if 4 digits:
// loop through Square similarly
// if 4 digits and a match:
// loop through Octagonal similarly (intuition on complexity for quicker exit, don't have to reloop base).
// if 4 digits and a match
// Pent, same
// Hept, Same
// Hex, Double match


// ended up embedding this because need to account for all orders of the 6 functions


function tri(n) {
  return n*(n+1)/2;
}
function sqr(n) {
  return n*n;
}
function pen(n) {
  return n*(3*n-1)/2;
}
function hex(n) {
  return n*(2*n-1);
}
function hep(n) {
  return n*(5*n-3)/2
}
function oct(n) {
  return n*(3*n-2);
}


function orderTest(a, b, c, d, e, f) {
  // console.log("start at a");
  for (var i_a = 1; a(i_a) < 10000; i_a++) {
    var a_out = a(i_a);
    if (a_out > 999) {
      // console.log("got to b");
      for (var i_b = 1; b(i_b) < 10000; i_b++) {
        var b_out = b(i_b);
        if (b_out > 999 && a_out.toString().substring(2,4) == b_out.toString().substring(0,2) &&
            b_out != a_out) {
          // console.log("got to f");
          for (var i_f = 1; f(i_f) < 10000; i_f++) {
            var f_out = f(i_f);
            if (f_out > 999 && a_out.toString().substring(0,2) == f_out.toString().substring(2,4) &&
                f_out != a_out && f_out != b_out) {
              // console.log("got to c");
              for (var i_c = 1; c(i_c) < 10000; i_c++) {
                var c_out = c(i_c);
                if (c_out > 999 && b_out.toString().substring(2,4) == c_out.toString().substring(0,2) &&
                    c_out != a_out && c_out != b_out && c_out != f_out) {
                  // console.log("got to e");
                  for (var i_e = 1; e(i_e) < 10000; i_e++) {
                    var e_out = e(i_e);
                    if (e_out > 999 && f_out.toString().substring(0,2) == e_out.toString().substring(2,4) &&
                        e_out != a_out && e_out != b_out && e_out != f_out && e_out != c_out) {
                      for (var i_d = 1; d(i_d) < 10000; i_d++) {
                        var d_out = d(i_d);
                        if (d_out > 999 &&
                            c_out.toStdsring().substring(2,4) == d_out.toString().substring(0,2) &&
                            e_out.toString().substring(0,2) == d_out.toString().substring(2,4) &&
                            d_out != a_out && d_out != b_out && d_out != f_out && d_out != c_out && d_out != e_out) {
                          // console.log(a_out , b_out , c_out , d_out , e_out , f_out);
                          return a_out + b_out + c_out + d_out + e_out + f_out;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return 0;
}

function cyclicalFigurate() {
  for (var a = 0; a < 6; a++) {
    for (var b = 0; b < 6; b++) {
      if (b != a) {
        for (var c = 0; c < 6; c++) {
          if (c != a && c != b) {
            for (var d = 0; d < 6; d++) {
              if (d != a && d != b && d != c) {
                for (var e = 0; e < 6; e++) {
                  if (e != a && e != b && e != c && e != d) {
                    for (var f = 0; f < 6; f++) {
                      if (f != a && f != b && f != c && f != d && f != e) {
                        var place = new Array(6);
                        place[a] = tri;
                        place[b] = sqr;
                        place[c] = pen;
                        place[d] = hex;
                        place[e] = hep;
                        place[f] = oct;
                        returnOrNot = orderTest(place[0], place[1], place[2], place[3], place[4], place[5]);
                        if (returnOrNot > 0) return returnOrNot;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
